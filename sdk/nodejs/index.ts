// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./attributeImporterIdentityProviderMapper";
export * from "./attributeToRoleIdentityMapper";
export * from "./customIdentityProviderMapping";
export * from "./customUserFederation";
export * from "./defaultGroups";
export * from "./defaultRoles";
export * from "./genericClientProtocolMapper";
export * from "./genericClientRoleMapper";
export * from "./getAuthenticationExecution";
export * from "./getAuthenticationFlow";
export * from "./getClientDescriptionConverter";
export * from "./getGroup";
export * from "./getRealm";
export * from "./getRealmKeys";
export * from "./getRole";
export * from "./getUser";
export * from "./getUserRealmRoles";
export * from "./group";
export * from "./groupMemberships";
export * from "./groupPermissions";
export * from "./groupRoles";
export * from "./hardcodedAttributeIdentityProviderMapper";
export * from "./hardcodedRoleIdentityMapper";
export * from "./identityProviderTokenExchangeScopePermission";
export * from "./provider";
export * from "./realm";
export * from "./realmEvents";
export * from "./realmKeystoreAesGenerated";
export * from "./realmKeystoreEcdsaGenerated";
export * from "./realmKeystoreHmacGenerated";
export * from "./realmKeystoreJavaGenerated";
export * from "./realmKeystoreRsa";
export * from "./realmKeystoreRsaGenerated";
export * from "./realmUserProfile";
export * from "./requiredAction";
export * from "./role";
export * from "./user";
export * from "./userGroups";
export * from "./userRoles";
export * from "./userTemplateImporterIdentityProviderMapper";
export * from "./usersPermissions";

// Export sub-modules:
import * as authentication from "./authentication";
import * as config from "./config";
import * as ldap from "./ldap";
import * as oidc from "./oidc";
import * as openid from "./openid";
import * as saml from "./saml";
import * as types from "./types";

export {
    authentication,
    config,
    ldap,
    oidc,
    openid,
    saml,
    types,
};

// Import resources to register:
import { AttributeImporterIdentityProviderMapper } from "./attributeImporterIdentityProviderMapper";
import { AttributeToRoleIdentityMapper } from "./attributeToRoleIdentityMapper";
import { CustomIdentityProviderMapping } from "./customIdentityProviderMapping";
import { CustomUserFederation } from "./customUserFederation";
import { DefaultGroups } from "./defaultGroups";
import { DefaultRoles } from "./defaultRoles";
import { GenericClientProtocolMapper } from "./genericClientProtocolMapper";
import { GenericClientRoleMapper } from "./genericClientRoleMapper";
import { Group } from "./group";
import { GroupMemberships } from "./groupMemberships";
import { GroupPermissions } from "./groupPermissions";
import { GroupRoles } from "./groupRoles";
import { HardcodedAttributeIdentityProviderMapper } from "./hardcodedAttributeIdentityProviderMapper";
import { HardcodedRoleIdentityMapper } from "./hardcodedRoleIdentityMapper";
import { IdentityProviderTokenExchangeScopePermission } from "./identityProviderTokenExchangeScopePermission";
import { Realm } from "./realm";
import { RealmEvents } from "./realmEvents";
import { RealmKeystoreAesGenerated } from "./realmKeystoreAesGenerated";
import { RealmKeystoreEcdsaGenerated } from "./realmKeystoreEcdsaGenerated";
import { RealmKeystoreHmacGenerated } from "./realmKeystoreHmacGenerated";
import { RealmKeystoreJavaGenerated } from "./realmKeystoreJavaGenerated";
import { RealmKeystoreRsa } from "./realmKeystoreRsa";
import { RealmKeystoreRsaGenerated } from "./realmKeystoreRsaGenerated";
import { RealmUserProfile } from "./realmUserProfile";
import { RequiredAction } from "./requiredAction";
import { Role } from "./role";
import { User } from "./user";
import { UserGroups } from "./userGroups";
import { UserRoles } from "./userRoles";
import { UserTemplateImporterIdentityProviderMapper } from "./userTemplateImporterIdentityProviderMapper";
import { UsersPermissions } from "./usersPermissions";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "keycloak:index/attributeImporterIdentityProviderMapper:AttributeImporterIdentityProviderMapper":
                return new AttributeImporterIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/attributeToRoleIdentityMapper:AttributeToRoleIdentityMapper":
                return new AttributeToRoleIdentityMapper(name, <any>undefined, { urn })
            case "keycloak:index/customIdentityProviderMapping:CustomIdentityProviderMapping":
                return new CustomIdentityProviderMapping(name, <any>undefined, { urn })
            case "keycloak:index/customUserFederation:CustomUserFederation":
                return new CustomUserFederation(name, <any>undefined, { urn })
            case "keycloak:index/defaultGroups:DefaultGroups":
                return new DefaultGroups(name, <any>undefined, { urn })
            case "keycloak:index/defaultRoles:DefaultRoles":
                return new DefaultRoles(name, <any>undefined, { urn })
            case "keycloak:index/genericClientProtocolMapper:GenericClientProtocolMapper":
                return new GenericClientProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:index/genericClientRoleMapper:GenericClientRoleMapper":
                return new GenericClientRoleMapper(name, <any>undefined, { urn })
            case "keycloak:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "keycloak:index/groupMemberships:GroupMemberships":
                return new GroupMemberships(name, <any>undefined, { urn })
            case "keycloak:index/groupPermissions:GroupPermissions":
                return new GroupPermissions(name, <any>undefined, { urn })
            case "keycloak:index/groupRoles:GroupRoles":
                return new GroupRoles(name, <any>undefined, { urn })
            case "keycloak:index/hardcodedAttributeIdentityProviderMapper:HardcodedAttributeIdentityProviderMapper":
                return new HardcodedAttributeIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/hardcodedRoleIdentityMapper:HardcodedRoleIdentityMapper":
                return new HardcodedRoleIdentityMapper(name, <any>undefined, { urn })
            case "keycloak:index/identityProviderTokenExchangeScopePermission:IdentityProviderTokenExchangeScopePermission":
                return new IdentityProviderTokenExchangeScopePermission(name, <any>undefined, { urn })
            case "keycloak:index/realm:Realm":
                return new Realm(name, <any>undefined, { urn })
            case "keycloak:index/realmEvents:RealmEvents":
                return new RealmEvents(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreAesGenerated:RealmKeystoreAesGenerated":
                return new RealmKeystoreAesGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreEcdsaGenerated:RealmKeystoreEcdsaGenerated":
                return new RealmKeystoreEcdsaGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreHmacGenerated:RealmKeystoreHmacGenerated":
                return new RealmKeystoreHmacGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreJavaGenerated:RealmKeystoreJavaGenerated":
                return new RealmKeystoreJavaGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreRsa:RealmKeystoreRsa":
                return new RealmKeystoreRsa(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreRsaGenerated:RealmKeystoreRsaGenerated":
                return new RealmKeystoreRsaGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmUserProfile:RealmUserProfile":
                return new RealmUserProfile(name, <any>undefined, { urn })
            case "keycloak:index/requiredAction:RequiredAction":
                return new RequiredAction(name, <any>undefined, { urn })
            case "keycloak:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "keycloak:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "keycloak:index/userGroups:UserGroups":
                return new UserGroups(name, <any>undefined, { urn })
            case "keycloak:index/userRoles:UserRoles":
                return new UserRoles(name, <any>undefined, { urn })
            case "keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper":
                return new UserTemplateImporterIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/usersPermissions:UsersPermissions":
                return new UsersPermissions(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("keycloak", "index/attributeImporterIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/attributeToRoleIdentityMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/customIdentityProviderMapping", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/customUserFederation", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/defaultGroups", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/defaultRoles", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/genericClientProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/genericClientRoleMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/group", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/groupMemberships", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/groupPermissions", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/groupRoles", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/hardcodedAttributeIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/hardcodedRoleIdentityMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/identityProviderTokenExchangeScopePermission", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realm", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmEvents", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreAesGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreEcdsaGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreHmacGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreJavaGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreRsa", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreRsaGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmUserProfile", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/requiredAction", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/role", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/user", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/userGroups", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/userRoles", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/userTemplateImporterIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/usersPermissions", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("keycloak", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:keycloak") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
